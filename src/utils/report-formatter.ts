import { AuditResults, ReportOptions, AuditReport, ExportFormat } from '@/types/audit.types'

/**
 * Generate a formatted audit report in the specified format
 */
export function generateReport(results: AuditResults, options: ReportOptions): AuditReport {
  const timestamp = new Date()
  const title = `SafeSolidity Audit Report - ${timestamp.toISOString().split('T')[0]}`

  let content = ''
  let filename = ''
  let mimeType = ''

  switch (options.format) {
    case ExportFormat.MARKDOWN:
      content = generateMarkdownReport(results, options, timestamp)
      filename = `audit-report-${timestamp.getTime()}.md`
      mimeType = 'text/markdown'
      break

    case ExportFormat.JSON:
      content = generateJsonReport(results, options, timestamp)
      filename = `audit-report-${timestamp.getTime()}.json`
      mimeType = 'application/json'
      break

    case ExportFormat.HTML:
      content = generateHtmlReport(results, options, timestamp)
      filename = `audit-report-${timestamp.getTime()}.html`
      mimeType = 'text/html'
      break

    default:
      throw new Error(`Unsupported export format: ${options.format}`)
  }

  return {
    title,
    timestamp,
    results,
    content,
    filename,
    mimeType
  }
}

/**
 * Generate a markdown formatted report
 */
function generateMarkdownReport(results: AuditResults, options: ReportOptions, timestamp: Date): string {
  let markdown = `# SafeSolidity Audit Report\n\n`
  markdown += `**Generated:** ${timestamp.toLocaleString()}\n`
  markdown += `**Contract:** ${results.metadata.name || 'Unknown'}\n`
  markdown += `**Lines of Code:** ${results.metadata.linesOfCode}\n`
  markdown += `**Analysis Duration:** ${results.metadata.duration}ms\n\n`

  if (options.includeMetadata) {
    markdown += `## Contract Metadata\n\n`
    markdown += `- **Size:** ${results.metadata.size} bytes\n`
    markdown += `- **Functions:** ${results.metadata.functions}\n`
    markdown += `- **Complexity:** ${results.metadata.complexity || 'N/A'}\n`
    markdown += `- **Compiler:** ${results.metadata.compiler || 'Unknown'}\n\n`
  }

  markdown += `## Summary\n\n`
  markdown += `- **Total Issues:** ${results.summary.total}\n`
  markdown += `- **Critical:** ${results.summary.critical}\n`
  markdown += `- **High:** ${results.summary.high}\n`
  markdown += `- **Medium:** ${results.summary.medium}\n`
  markdown += `- **Low:** ${results.summary.low}\n`
  markdown += `- **Info:** ${results.summary.info}\n`
  markdown += `- **Risk Score:** ${results.summary.riskScore}/100\n\n`

  if (results.vulnerabilities.length > 0) {
    markdown += `## Vulnerabilities\n\n`

    const filteredVulnerabilities = options.severityFilter && options.severityFilter.length > 0
      ? results.vulnerabilities.filter(v => options.severityFilter!.includes(v.severity))
      : results.vulnerabilities

    filteredVulnerabilities.forEach((vulnerability, index) => {
      markdown += `### ${index + 1}. ${vulnerability.title}\n\n`
      markdown += `**Severity:** ${vulnerability.severity.toUpperCase()}\n`
      markdown += `**Category:** ${vulnerability.category.replace('-', ' ')}\n`
      markdown += `**Location:** Line ${vulnerability.location.line}\n\n`

      markdown += `**Description:**\n${vulnerability.description}\n\n`

      if (options.includeCode && vulnerability.codeSnippet) {
        markdown += `**Code:**\n\`\`\`solidity\n${vulnerability.codeSnippet}\n\`\`\`\n\n`
      }

      markdown += `**Recommendation:**\n${vulnerability.recommendation}\n\n`

      if (vulnerability.references && vulnerability.references.length > 0) {
        markdown += `**References:**\n${vulnerability.references.map(ref => `- ${ref}`).join('\n')}\n\n`
      }

      markdown += `---\n\n`
    })
  } else {
    markdown += `## ✅ No Vulnerabilities Found\n\n`
    markdown += `Great! Your smart contract passed all security checks.\n\n`
  }

  if (options.includeRecommendations && results.recommendations.length > 0) {
    markdown += `## Security Recommendations\n\n`
    results.recommendations.forEach((rec, index) => {
      markdown += `${index + 1}. ${rec}\n`
    })
    markdown += `\n`
  }

  if (options.branding) {
    markdown += `---\n\n`
    markdown += `*Generated by [SafeSolidity Lite](https://github.com/Gzeu/safesolidity-lite) - Web-based Solidity Security Auditing*\n`
  }

  return markdown
}

/**
 * Generate a JSON formatted report
 */
function generateJsonReport(results: AuditResults, options: ReportOptions, timestamp: Date): string {
  const reportData = {
    title: 'SafeSolidity Audit Report',
    timestamp: timestamp.toISOString(),
    metadata: options.includeMetadata ? results.metadata : undefined,
    summary: results.summary,
    vulnerabilities: results.vulnerabilities,
    recommendations: options.includeRecommendations ? results.recommendations : undefined,
    engines: results.engines,
    ...(options.branding && {
      generatedBy: 'SafeSolidity Lite',
      repository: 'https://github.com/Gzeu/safesolidity-lite'
    })
  }

  return JSON.stringify(reportData, null, 2)
}

/**
 * Generate an HTML formatted report
 */
function generateHtmlReport(results: AuditResults, options: ReportOptions, timestamp: Date): string {
  const riskColor = getRiskColor(results.summary.riskScore)

  let html = `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>SafeSolidity Audit Report</title>
    <style>
        body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', system-ui, sans-serif; margin: 40px; line-height: 1.6; }
        .header { background: #f8f9fa; padding: 20px; border-radius: 8px; margin-bottom: 30px; }
        .summary { display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 20px; margin: 20px 0; }
        .stat-card { background: white; padding: 20px; border-radius: 8px; border: 1px solid #e9ecef; text-align: center; }
        .stat-value { font-size: 2em; font-weight: bold; }
        .vulnerability { margin: 20px 0; padding: 15px; border-radius: 8px; border-left: 4px solid; }
        .critical { border-color: #dc3545; background: #fff5f5; }
        .high { border-color: #fd7e14; background: #fff8f0; }
        .medium { border-color: #ffc107; background: #fffce0; }
        .low { border-color: #20c997; background: #f0fff8; }
        .info { border-color: #6f42c1; background: #f8f0ff; }
        .code { background: #f8f9fa; padding: 15px; border-radius: 4px; font-family: 'Courier New', monospace; margin: 10px 0; }
        .footer { margin-top: 40px; padding-top: 20px; border-top: 1px solid #e9ecef; text-align: center; color: #6c757d; }
    </style>
</head>
<body>
    <div class="header">
        <h1>SafeSolidity Audit Report</h1>
        <p><strong>Generated:</strong> ${timestamp.toLocaleString()}</p>
        <p><strong>Contract:</strong> ${results.metadata.name || 'Unknown'}</p>
        <p><strong>Lines of Code:</strong> ${results.metadata.linesOfCode}</p>
    </div>

    <div class="summary">
        <div class="stat-card">
            <div class="stat-value">${results.summary.total}</div>
            <div>Total Issues</div>
        </div>
        <div class="stat-card">
            <div class="stat-value" style="color: ${riskColor}">${results.summary.riskScore}</div>
            <div>Risk Score</div>
        </div>
        <div class="stat-card">
            <div class="stat-value" style="color: #dc3545">${results.summary.critical}</div>
            <div>Critical</div>
        </div>
        <div class="stat-card">
            <div class="stat-value">${results.metadata.duration}ms</div>
            <div>Duration</div>
        </div>
    </div>`

  if (results.vulnerabilities.length > 0) {
    html += `<h2>Vulnerabilities</h2>`
    results.vulnerabilities.forEach((vulnerability) => {
      const severityClass = vulnerability.severity.toLowerCase()
      html += `
    <div class="vulnerability ${severityClass}">
        <h3>${vulnerability.title}</h3>
        <p><strong>Severity:</strong> ${vulnerability.severity.toUpperCase()}</p>
        <p><strong>Category:</strong> ${vulnerability.category.replace('-', ' ')}</p>
        <p><strong>Location:</strong> Line ${vulnerability.location.line}</p>
        <p>${vulnerability.description}</p>`

      if (options.includeCode && vulnerability.codeSnippet) {
        html += `<div class="code">${escapeHtml(vulnerability.codeSnippet)}</div>`
      }

      html += `<p><strong>Recommendation:</strong> ${vulnerability.recommendation}</p>`
      if (vulnerability.references && vulnerability.references.length > 0) {
        html += `<p><strong>References:</strong> ${vulnerability.references.join(', ')}</p>`
      }
      html += `</div>`
    })
  } else {
    html += `<h2>✅ No Vulnerabilities Found</h2><p>Great! Your smart contract passed all security checks.</p>`
  }

  if (options.includeRecommendations && results.recommendations.length > 0) {
    html += `<h2>Security Recommendations</h2><ul>`
    results.recommendations.forEach(rec => {
      html += `<li>${rec}</li>`
    })
    html += `</ul>`
  }

  if (options.branding) {
    html += `<div class="footer">
        <p>Generated by <a href="https://github.com/Gzeu/safesolidity-lite">SafeSolidity Lite</a></p>
    </div>`
  }

  html += `</body></html>`

  return html
}

/**
 * Get color for risk score
 */
function getRiskColor(score: number): string {
  if (score >= 80) return '#dc3545' // Critical - Red
  if (score >= 60) return '#fd7e14' // High - Orange
  if (score >= 40) return '#ffc107' // Medium - Yellow
  if (score >= 20) return '#20c997' // Low - Teal
  return '#28a745' // Minimal - Green
}

/**
 * Escape HTML characters
 */
function escapeHtml(text: string): string {
  const div = document.createElement('div')
  div.textContent = text
  return div.innerHTML
}
