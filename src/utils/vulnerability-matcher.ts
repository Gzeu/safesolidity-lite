import { AuditResult, Vulnerability } from '../types/audit';

const patterns = [
  {
    id: 'REENTRANCY',
    title: 'Reentrancy risk',
    severity: 'CRITICAL' as const,
    regex: /(call\.value\(|\.\s*call\()|\.transfer\(|\.send\()/i
  },
  {
    id: 'TX_ORIGIN',
    title: 'tx.origin misuse',
    severity: 'HIGH' as const,
    regex: /\btx\.origin\b/i
  },
  {
    id: 'TIMESTAMP',
    title: 'Timestamp dependence',
    severity: 'MEDIUM' as const,
    regex: /\bblock\.timestamp\b|\bnow\b/i
  },
  {
    id: 'UNCHECKED_CALL',
    title: 'Unchecked external call result',
    severity: 'HIGH' as const,
    regex: /\.call\([^)]*\)(?!\s*;?\s*require|\s*;?\s*if)/i
  }
];

export function matchVulnerabilities(source: string): Vulnerability[] {
  const lines = source.split('\n');
  const vulns: Vulnerability[] = [];
  for (const rule of patterns) {
    lines.forEach((line, idx) => {
      if (rule.regex.test(line)) {
        vulns.push({
          id: rule.id,
          title: rule.title,
          description: `Detected pattern: ${rule.regex}`,
          severity: rule.severity,
          line: idx + 1,
          snippet: line.trim()
        });
      }
    });
  }
  return vulns;
}

export function analyzeSource(source: string): AuditResult {
  return {
    meta: { engine: 'rule-based' },
    vulnerabilities: matchVulnerabilities(source)
  };
}
