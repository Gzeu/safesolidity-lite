import React from 'react'
import { Vulnerability, VulnerabilitySeverity } from '@/types/vulnerability.types'
import { AlertTriangle, Bug, Shield, Info, Zap } from 'lucide-react'

interface VulnerabilityListProps {
  vulnerabilities: Vulnerability[]
}

/**
 * Component for displaying a list of detected vulnerabilities
 */
const VulnerabilityList: React.FC<VulnerabilityListProps> = ({
  vulnerabilities
}) => {
  if (vulnerabilities.length === 0) {
    return (
      <div className="flex flex-col items-center justify-center p-8 text-center">
        <Shield className="h-12 w-12 text-green-400 mb-3" />
        <h3 className="text-lg font-semibold mb-2 text-green-400">No Vulnerabilities Detected</h3>
        <p className="text-muted-foreground">Great! Your smart contract passed all security checks.</p>
      </div>
    )
  }

  const getSeverityIcon = (severity: VulnerabilitySeverity) => {
    const iconClass = "h-4 w-4"
    switch (severity) {
      case VulnerabilitySeverity.CRITICAL:
        return <AlertTriangle className={`${iconClass} text-red-500`} />
      case VulnerabilitySeverity.HIGH:
        return <Zap className={`${iconClass} text-orange-500`} />
      case VulnerabilitySeverity.MEDIUM:
        return <Bug className={`${iconClass} text-yellow-500`} />
      case VulnerabilitySeverity.LOW:
        return <Info className={`${iconClass} text-blue-500`} />
      default:
        return <Shield className={`${iconClass} text-gray-500`} />
    }
  }

  const getSeverityBadgeClass = (severity: VulnerabilitySeverity) => {
    const baseClass = "px-2 py-1 rounded-full text-xs font-medium border"
    switch (severity) {
      case VulnerabilitySeverity.CRITICAL:
        return `${baseClass} severity-critical`
      case VulnerabilitySeverity.HIGH:
        return `${baseClass} severity-high`
      case VulnerabilitySeverity.MEDIUM:
        return `${baseClass} severity-medium`
      case VulnerabilitySeverity.LOW:
        return `${baseClass} severity-low`
      default:
        return `${baseClass} severity-info`
    }
  }

  return (
    <div className="space-y-3 max-h-96 overflow-y-auto">
      {vulnerabilities.map((vulnerability, index) => (
        <div 
          key={`${vulnerability.id}-${index}`}
          className="bg-card border border-border rounded-lg p-4 space-y-3 hover:border-muted-foreground/50 transition-colors"
        >
          {/* Header with severity and title */}
          <div className="flex items-start justify-between gap-3">
            <div className="flex items-center gap-2">
              {getSeverityIcon(vulnerability.severity)}
              <h4 className="font-semibold text-foreground">{vulnerability.title}</h4>
            </div>
            <div className={getSeverityBadgeClass(vulnerability.severity)}>
              {vulnerability.severity.toUpperCase()}
            </div>
          </div>

          {/* Description */}
          <p className="text-muted-foreground text-sm">
            {vulnerability.description}
          </p>

          {/* Location information */}
          {vulnerability.location && (
            <div className="flex items-center gap-2 text-xs text-muted-foreground">
              <span>üìç</span>
              <span>
                {vulnerability.location.function && (
                  <span className="font-mono bg-muted px-1 rounded">
                    {vulnerability.location.function}()
                  </span>
                )}
                {vulnerability.location.line && (
                  <span className="ml-2">
                    Line {vulnerability.location.line}
                    {vulnerability.location.column && `:${vulnerability.location.column}`}
                  </span>
                )}
              </span>
            </div>
          )}

          {/* Code snippet if available */}
          {vulnerability.codeSnippet && (
            <div className="bg-muted/30 p-2 rounded border">
              <pre className="text-xs overflow-x-auto">
                <code>{vulnerability.codeSnippet}</code>
              </pre>
            </div>
          )}

          {/* Recommendation */}
          <div className="bg-blue-500/10 border border-blue-500/20 rounded p-3">
            <p className="text-sm text-blue-200">
              <strong>üí° Recommendation:</strong> {vulnerability.recommendation}
            </p>
          </div>

          {/* Additional info */}
          <div className="flex items-center justify-between text-xs text-muted-foreground">
            <span>ID: {vulnerability.id}</span>
            <span>Confidence: {vulnerability.confidence}%</span>
          </div>
        </div>
      ))}
    </div>
  )
}

export default VulnerabilityList
